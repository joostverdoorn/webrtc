{
  "name": "jscoverage-reporter",
  "version": "0.1.0",
  "description": "JSCoverage reporter for Jasmine",
  "homepage": "https://github.com/NeoPhi/jscoverage-reporter",
  "keywords": [
    "testing",
    "jasmine",
    "jscoverage"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/NeoPhi/jscoverage-reporter/raw/master/LICENSE"
    }
  ],
  "author": {
    "name": "Daniel Rinehart",
    "email": "danielr@neophi.com",
    "url": "http://danielr.neophi.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/NeoPhi/jscoverage-reporter.git"
  },
  "bugs": {
    "url": "https://github.com/NeoPhi/jscoverage-reporter/issues"
  },
  "main": "src/jasmine.jscoverage_reporter.js",
  "devDependencies": {
    "jshint": "0.5.8",
    "jasmine-node": "1.0.21",
    "wrench": "1.3.5"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "pretest": "jshint src tools --config config/jshint.config.json && jshint test --config config/spec.jshint.config.json",
    "test": "node tools/coverage --junitreport build/test",
    "report": "node tools/report.js reports/"
  },
  "readme": "# jscoverage-reporter - JSCoverage Report for Jasmine\n\nA [Jasmine](https://github.com/pivotal/jasmine) reporter that will capture code coverage metrics generated by [JSCoverage](http://siliconforks.com/jscoverage/). Works well with [jasmine-node](https://github.com/mhevery/jasmine-node) and [PhantomJS](http://www.phantomjs.org/).\n\nAt this point the reporter requires a little setup to use as it assumes you are already using jasmine-node for testing. A simple wrapper script described below makes it easy to add this reporter to an out of the box jasmine-node install.\n\n# Installation\n    npm install jscoverage-reporter\n\nYou will also need a version of JSCoverage installed to generate the covered files. My preference is to download and install from [http://siliconforks.com/jscoverage/](http://siliconforks.com/jscoverage/) as we also test non node.js code.\n\n# Usage\n\n## Core Syntax\n\n    require('jscoverage-reporter');\n    jasmine.getEnv().addReporter(new jasmine.JSCoverageReporter('./reports'));\n\n## jasmine-node wrapper\nCreate a file called **coverage.js**:\n\n    require('jasmine-node');\n    require('jscoverage-reporter');\n    var jasmineEnv = jasmine.getEnv();\n    // Adjust output directory as needed\n    jasmineEnv.addReporter(new jasmine.JSCoverageReporter('./reports'));\n    require('./node_modules/jasmine-node/lib/jasmine-node/cli.js');\n\nAfter running JSCoverage on the code to test:\n\n    npm install jasmine-node\n    node coverage.js <jasmine-node options>\n\n## JSCoverage wrapper\nTo run a single command that executes JSCoverage and runs the tests, an example can be found at [tools/coverage.js](https://github.com/NeoPhi/jscoverage-reporter/blob/master/tools/coverage.js).\n\nIn `package.json` you can then define your test script as:\n\n    \"test\": \"node tools/coverage --junitreport build/test\",\n\n\n## Viewing the Report\nTwo files `jscoverage.json` and `coverage.xml` will be produced. The `jscoverage.json` file can be used with the modified JSCoverage [template](https://github.com/NeoPhi/jscoverage-reporter/tree/master/template) to view the coverage. As JSCoverage complains about file based paths, to view the data a simple node.js based HTTP report server can be found in [tools/report.js](https://github.com/NeoPhi/jscoverage-reporter/blob/master/tools/report.js). The `coverage.xml` is suitable for Emma report tracking such as with [Emma Jenkins Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Emma+Plugin).\n\n----\nCopyright (c) 2012 Daniel Rinehart. This software is licensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "jscoverage-reporter@0.1.0",
  "dist": {
    "shasum": "4ed076fef3f568841e441f71ebeb12214da3f0c3"
  },
  "_from": "jscoverage-reporter@",
  "_resolved": "https://registry.npmjs.org/jscoverage-reporter/-/jscoverage-reporter-0.1.0.tgz"
}
