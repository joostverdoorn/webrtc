#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language dutch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Inleiding
\end_layout

\begin_layout Standard
In dit hoofdstuk zullen we uitgebreid de aanpak en planning van het project
 bespreken.
 Allereerst zullen we uiteenzetten wat onze werkwijze zal zijn en hoe we
 onze tijd zullen verdelen over de deliverables, welke hulpmiddelen we hiervoor
 zullen gaan gebruiken, en de mogelijke uitdagingen die we hierbij voorzien.
 Ten tweede zullen wij de technieken bespreken die we in alle waarschijnlijkheid
 zullen gaan gebruiken.
 Vervolgens gaan we in op de geplande werkzaamheden en tot slot zullen we
 onze beoogde planning bespreken.
\end_layout

\begin_layout Subsection
Methodiek
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Ontwikkelmethode"

\end_inset

Scrum
\end_layout

\begin_layout Standard
Tijdens de bacheloropleiding Technische Informatica zijn verscheidene softwareon
twikkelmethoden behandeld.
 Elk heeft zo z'n voor- en nadelen, maar Agile methoden als Scrum zijn vaak
 uitermate geschikt voor relatief kleine en kortlopende projecten.
 Scrum maakt gebruik van korte ontwikkelcycli, en houdt op deze manier de
 vaart in een project.
 Aan het begin van elke sprint wordt er bepaald welke features er in die
 sprint zullen worden geïmplementeerd, en aan het eind van elke sprint dient
 er een werkend product te zijn.
 De features die nog geïmplementeerd moeten worden bevinden zich in de Product
 Backlog, en hieruit wordt elke sprint een selectie gemaakt van items die
 die sprint geïmplementeerd zullen worden.
\end_layout

\begin_layout Standard
Ons team zal het core team vormen, waarbij 
\noun on
Karens
\noun default
 de rol van de Scrum Master zal aannemen.
 De Scrum Master zal er voor zorgen dat het team zich geen zorgen hoeft
 te maken over externe factoren en zal zorgen dat de Scrumproces gevolgd
 wordt.
 Onze begeleider vanuit TNO, 
\noun on
Victor Klos
\noun default
, zal de Product Owner zijn.
 Hij zal controleren of de software die wij ontwikkelen voldoet aan de eisen
 die TNO stelt, en zal de Product Backlog prioriteren.
 
\noun on
Eelco Cramer 
\noun default
zal ons op technisch vlak begeleiden, en ons assisteren met het maken van
 (belangrijke) technische beslissingen.
\end_layout

\begin_layout Standard
Omdat ons project maar een korte tijd loopt zullen we sprints hanteren van
 één week, lopend van donderdag tot woensdag.
 Dagelijks om 10 uur 's ochtends zullen wij een stand-up houden van maximaal
 een kwartier, waarbij we behandelen wat we sinds de vorige stand-up hebben
 gedaan, wat we zullen gaan doen en waar we tegenaan lopen.
 De Scrum Master zal zorgen dat we hierbij niet te veel afdwalen en dat
 de stand-up niet langer duurt dan 15 minuten.
 Elke donderdagochtend zullen we onze wekelijkse Sprint Planning Meeting
 houden, waarbij we bepalen welke Backlog items we die week zullen afwerken.
 De Product Owner zal hier zo veel mogelijk aanwezig zijn om te zorgen dat
 de juiste prioriteiten worden gesteld.
\end_layout

\begin_layout Subsubsection
Behaviour-Driven Development
\end_layout

\begin_layout Standard
Om te garanderen dat onze software volledig wordt getest zullen wij naast
 Scrum de ontwikkelmethodiek Behaviour-Driven Development (BDD) hanteren.
 BDD kan gezien worden als een extensie op Test-Driven Development, maar
 verschilt hiervan in dat tests worden geschreven die veel gelijkenis tonen
 met user stories of specificaties.
 Deze stories en specificaties kunnen makkelijk worden ontleed uit de Backlog
 items die we voor Scrum zullen bijhouden.
 Wel is het bij BDD zo dat, net als bij TDD, tests in principe vooraf geschreven
 dienen te worden waarna de code wordt geïmplementeerd die ervoor zal zorgen
 dat de tests slagen.
 Deze tests zullen niet alleen dienen om te kijken of die software het gewenste
 gedrag vertoont, maar ook om te kijken of er later in het proces geen functiona
liteit wordt gebroken en ook zodat mensen die minder bekend zijn met de
 code uit de tests kunnen opmaken hoe de code werkt.
 Als testing framework zullen we gebruik maken van Jasmine, een BDD-test-framewo
rk voor JavaScript.
 
\end_layout

\begin_layout Subsubsection
Toolchain
\end_layout

\begin_layout Standard
Voor het beheer van de geschreven code zullen we gebruik maken van het Git
 versiecontrolesysteem, in een private repository op Github
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://www.github.com/"

\end_inset


\end_layout

\end_inset

.
 De begeleiders kunnen toegang krijgen tot deze repository mochten ze hier
 behoefte aan hebben.
 Ook zullen wij gebruik maken van Github Issues voor onze Product Backlog,
 en de tool Huboard
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.huboard.com/"

\end_inset


\end_layout

\end_inset

 zal ons helpen met het ordenen van deze items volgens de Scrum methodiek.
\end_layout

\begin_layout Standard
We zullen niet rechtstreeks in JavaScript programmeren maar in plaats hiervan
 de taal CoffeeScript gebruiken.
 CoffeeScript is een taal die qua syntaxis veel lijkt op Ruby en die door
 een compiler omgezet wordt in equivalente JavaScript code.
 De voordelen van CoffeeScript zijn talrijk maar het grootste voordeel is
 toch wel dat CoffeeScript een volledig object georiënteerde taal is, in
 tegenstelling tot JavaScript met een nogal onhandige prototype structuur.
 Voor het compileren van de CoffeeScript-code zullen we gebruik maken van
 Cake (het CoffeeScript equivalent van Make), waarbij we in een Cakefile
 definiëren waar de gecompileerde bestanden moeten komen.
 Deze methode helpt ons en zo nodig anderen met het makkelijk verkrijgen
 van de juiste bestanden om ons project snel draaiende te krijgen.
\end_layout

\begin_layout Standard
Omdat de uiteindelijke library in heldere JavaScript geschreven zal moeten
 zijn, zullen we tegen het einde van het project zorgen dat we de CoffeeScript
 op een nader te bepalen manier wordt omgezet in functioneel equivalente
 JavaScript code.
\end_layout

\begin_layout Standard
Ook hebben wij gekozen om met dezelfde IDE met CoffeeScript ondersteuning
 te werken: Sublime Text 2.
 Zo hopen wij de kans dat het mis gaat op verschillende systemen te verkleinen.
 Zo zijn ook de kleinste spatie gerelateerde instellingen belangrijk omdat
 CoffeeScript met indentatie in plaats van brackets werkt.
\end_layout

\begin_layout Subsection
Technieken
\end_layout

\begin_layout Standard
Bij dit project zullen we gebruik maken van de nieuwste technieken op het
 gebied van het Web.
 Allereerst staat natuurlijk WebRTC centraal, en stelt ons in staat om een
 peer-to-peer verbinding te leggen tussen twee browsers.
 WebRTC wordt in browsers geïmplementeerd als een API in JavaScript, en
 van deze taal zullen we dan ook veel gebruik maken (al is het via CoffeeScript,
 zie hierboven).
 Server-side zullen we gebruik maken van Node.js, voor welke wij ook in CoffeeScr
ipt zullen programmeren.
 Om code zowel client als server-side te gebruiken zullen we op Node.js ook
 gebruik maken van AMD (via Require.js) in plaats van Node.js' eigen require
 systeem.
 Dit zal voorkomen dat we code meermaals moeten schrijven en onderhouden.
 Voor verbindingen tussen Node.js en de browser zullen we WebSockets gebruiken.
 Deze verbinding zal onder andere gebruikt worden als signaling channel
 voor de totstandkoming van de daadwerkelijke WebRTC connectie.
 Ook zullen we naar alle waarschijnlijkheid een computer graphics implementatie
 in HTML5 gebruiken - denk aan Canvas of WebGL - in de game die we ontwikkelen.
 
\end_layout

\begin_layout Subsection
Planning
\end_layout

\begin_layout Standard
Omdat wij Scrum gebruiken is het niet nodig om vooraf een volledige planning
 samen te stellen.
 Elke sprint zal gekeken worden naar wat er die sprint precies ontwikkeld
 zal worden.
 Dit zorgt ervoor dat we snel om kunnen schakelen naar waar onze aandacht
 het meeste nodig is.
 Een globale planning kunnen we wel geven, en wordt hieronder uitééngezet.
\end_layout

\begin_layout Subsubsection*
Week 0 - 1 mei t/m 23 juni
\end_layout

\begin_layout Standard
Uitkiezen project + plan van aanpak + opzetten ontwikkel omgeving + library
\end_layout

\begin_layout Subsubsection*
Week 1 - 24 juni t/m 30 juni
\end_layout

\begin_layout Standard
Library
\end_layout

\begin_layout Subsubsection*
Week 2 - 1 juli t/m 7 juli
\end_layout

\begin_layout Standard
Library
\end_layout

\begin_layout Subsubsection*
Week 3 - 8 juli t/m 14 juli: Sprint 1
\end_layout

\begin_layout Standard
Game + library + oriëntatieverslag
\end_layout

\begin_layout Subsubsection*
Week 4 - 15 juli t/m 21 juli: Sprint 2
\end_layout

\begin_layout Standard
Game + library
\end_layout

\begin_layout Subsubsection*
Week 5 - 22 juli t/m 28 juli: Sprint 3
\end_layout

\begin_layout Standard
Game + library
\end_layout

\begin_layout Subsubsection*
Week 6 - 29 t/m 4 augustus: Sprint 4
\end_layout

\begin_layout Standard
Game + library
\end_layout

\begin_layout Subsubsection*
Week 7 - 5 augustus t/m 11 augustus: Sprint 5
\end_layout

\begin_layout Standard
Game + library
\end_layout

\begin_layout Subsubsection*
Week 8 - 12 augustus t/m 18 augustus: Sprint 6
\end_layout

\begin_layout Standard
Game
\end_layout

\begin_layout Subsubsection*
Week 9 - 19 augustus t/m 25 augustus: Sprint 7
\end_layout

\begin_layout Standard
Game
\end_layout

\begin_layout Subsubsection*
Week 10 - 26 augustus t/m 1 september
\end_layout

\begin_layout Standard
Afronden verslagen + evaluatie + eindpresentatie
\end_layout

\end_body
\end_document
